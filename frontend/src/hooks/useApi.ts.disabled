// import { useSelector } from 'react-redux';
// import { toast } from 'react-toastify';
import useSWR, { SWRResponse, useSWRConfig } from 'swr';
import ScopedMutator from 'swr';
// import { TOAST_OPTIONS } from '../constants/toast';
// import { getTokenSelector } from '../selectors/auth';
// import { getCompanyTemp } from '../utils/company';
// import { logoutRedirect } from '../utils/general';

// const BASE_URL = process.env.BACKEND_API_URL;
const BASE_URL = "http://127.0.0.1:5500/v1";

const defaultContentType = 'application/json';

interface ApiParams<U> {
  path: string;
  method: string;
  body?: U;
  contentType?: string;
  header?: Record<string, string>;
  params?: Record<string, string>;
  formData?: FormData;
  showError?: boolean;
}

type ApiFunctionParams<U> = ApiParams<U> & {
  token?: string;
};

const swrApi = async <T, U>(payload: ApiFunctionParams<U>): Promise<T> => {
  const {
    path,
    method,
    body,
    contentType: contentTypeSent,
    header,
    token,
    params,
    formData,
    showError = true
  } = payload;
  let url = `${BASE_URL}/v1/${path}`;
  if (params) {
    const query = Object.keys(params)
      .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)
      .join('&');
    url = `${url}?${query}`;
  }
  const contentType = contentTypeSent || defaultContentType;

  const headers: {
    'Content-Type'?: string;
    Authorization: string;
    // CompanyId: string;
  } = {
    ...header,
    'Content-Type': `${contentType}`,
    Authorization: token ? `Bearer ${token}` : '',
    // CompanyId: getCompanyTemp()
  };

  // TODO: we shoul figure out how to do this better.
  if (formData) delete headers['Content-Type'];

  try {
    const response = await fetch(url, {
      method,
      headers,
      body: body ? JSON.stringify(body) : formData ?? undefined
    });
    const responseBody = await response.json();
    responseBody.ok = true;

    if (response.status !== 200 && response.status !== 201) {
      const { message } = await responseBody;
      // Token has expired errors
      if (
        message === 'jwt expired' ||
        message === 'No authorization token was found'
      ) {
        // logoutRedirect();
        responseBody.ok = true;
      } else {
        // if (showError) toast.error(message, TOAST_OPTIONS);
        responseBody.ok = false;
      }
    }
    return responseBody;
  } catch (error) {
    throw Error(error as string);
  }
};

/**
 * Hook for making server calls.
 * First generic is for the response type, second is for the body type.
 * @param params
 * @returns
 */
export function useApi<T, U>(params: ApiParams<U>): SWRResponse<T> {
  // const token = useSelector(getTokenSelector);

  const response = useSWR(
    {
      // token,
      ...params
    },
    (...args) => swrApi<T, U>(...args)
  );

  return response;
}

// export function useApiRefetch(): typeof ScopedMutator {
//   const { mutate } = useSWRConfig();
//   return mutate;
// }
